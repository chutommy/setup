" VIMRC

" maintainer: Tommy Chu
" github: chutommy
" email: tommychu2256@gmail.com

" plugins
call plug#begin('~/.vim/plugged')
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'preservim/nerdtree'
    Plug 'preservim/nerdcommenter'
    Plug 'airblade/vim-gitgutter'
    " Plug 'karb94/neoscroll.nvim'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " Plug 'morhetz/gruvbox'
    Plug 'ayu-theme/ayu-vim'
    Plug 'ryanoasis/vim-devicons'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-surround'
    " Plug 'Shougo/echodoc.vim'
    Plug 'mg979/vim-visual-multi', {'branch': 'master'}
    " Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
call plug#end()

" override sensible
runtime! plugin/sensible.vim

" syntax
syntax on
filetype plugin indent on

" chars
set encoding=utf-8

" system menu
set wildmenu

" disable mouse
set mouse-=a

" share system clipboard
set clipboard=unnamedplus

" error bell
set noerrorbells

" autocheck
set autowrite
set autoread
set lazyredraw

" history
set history=1000
set formatoptions+=j

" backspace behavior
set backspace=indent,eol,start

" split
set splitright
set splitbelow

" white symbols
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent
set expandtab

" invisible chars
set list
set listchars=tab:··>,trail:·,nbsp:_

" movement
set virtualedit=block
"set wrap
set scrolloff=4
set sidescrolloff=4

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" numbers
set number
set relativenumber

" cursor
set cursorline
set cursorlineopt=line
set cursorcolumn

" meta data
set ruler
set showcmd
set showmode

" brackets
set showmatch
set matchtime=2

" colors
"colorscheme morning
"colorscheme evening
"colorscheme desert
set t_Co=256
set background=dark
set termguicolors

" statusline
" set laststatus=2
" set statusline=
" set statusline+=\ %F\ %M\ %Y\ %R\ %W
" set statusline+=%=
" set statusline+=\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\ %p%%

" mapping
let mapleader = ","

" window resize
nnoremap <Up>    :resize +10<CR>
nnoremap <Down>  :resize -10<CR>
nnoremap <Left>  :vertical resize -10<CR>
nnoremap <Right> :vertical resize +10<CR>

" terminal
nnoremap tts :new term://bash<CR>i
nnoremap ttv :vnew term://bash<CR>i

" highlight yank
au TextYankPost * silent! lua vim.highlight.on_yank {timeout=150}

" =======
" PLUGINS
" =======

" airline
" let g:airline_theme='gruvbox'
let g:airline_theme='ayu_dark'
let g:airline#extensions#tabline#enabled = 1
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.colnr = ' ℅:'
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ' :'
let g:airline_symbols.maxlinenr = '☰ '
let g:airline_symbols.dirty='⚡'

" nerdtree
nnoremap <leader>k :NERDTreeToggle<CR>
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1

" nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDToggleCheckAllLines = 1

" neoscroll
" if has('nvim')
"     lua require('neoscroll').setup()
" endif

" fzf
nnoremap <leader>fo :Files<cr>
nnoremap <leader>fl :BLines<cr>
nnoremap <leader>fb :Buffers<cr>
let g:fzf_layout = { 'down': '~33%' }
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.7 } }
let g:fzf_preview_window = 'right:60%'
let g:fzf_buffers_jump = 0

" telescope
nnoremap <leader>o <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>l <cmd>lua require('telescope.builtin').current_buffer_fuzzy_find()<cr>
nnoremap <leader>b <cmd>lua require('telescope.builtin').buffers()<cr>

" git gutter
let g:gitgutter_max_signs = -1
nmap <leader>ggs <Plug>(GitGutterStageHunk)
nmap <leader>ggu <Plug>(GitGutterUndoHunk)
nmap ]g <Plug>(GitGutterNextHunk)
nmap [g <Plug>(GitGutterPrevHunk)
let g:gitgutter_sign_added = '⮝'
let g:gitgutter_sign_modified = '⮞'
let g:gitgutter_sign_removed = '⮟'
let g:gitgutter_sign_removed_first_line = '⮟'
let g:gitgutter_sign_modified_removed = '⮞'
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1
highlight link GitGutterChangeLine DiffText
highlight link GitGutterChangeLineNr Underlined

" coc
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? coc#_select_confirm() : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

let g:coc_global_extensions = [
    \ 'coc-lists',
    \ 'coc-vimlsp',
    \ 'coc-go',
    \ 'coc-python',
    \ 'coc-clangd',
    \ 'coc-sh',
    \ 'coc-sql',
    \ 'coc-tsserver',
    \ 'coc-prettier',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-markdownlint',
    \ 'coc-json',
    \ 'coc-yaml',
    \ 'coc-emmet',
    \ 'coc-docker',
  \ ]

" gruvbox
" if (empty($TMUX))
"   if (has("nvim"))
"     let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif
" let g:gruvbox_contrast_dark = "hard"
" let g:gruvbox_contrast_light = "hard"
" let g:gruvbox_sign_column = "bg0"
" colorscheme gruvbox
set termguicolors
let ayucolor="dark"
colorscheme ayu

" echodoc
set noshowmode
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = "echo"

" clear search
nnoremap <C-s> :call ClearSearch()<CR>:nohl<CR>
function! ClearSearch()
    let @/=""
endfunction
